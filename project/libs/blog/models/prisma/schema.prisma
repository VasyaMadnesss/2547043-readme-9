
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  video
  text
  quote
  photo
  link
}

enum PostStatus {
  published
  draft
}

model Post {
  id             String     @id @default(uuid())
  type           PostType
  status         PostStatus @default(published)
  createdAt      DateTime   @default(now())
  publishedAt    DateTime
  updatedAt      DateTime   @updatedAt

  userId         String  // автор (внешний идентификатор)

  // Репост
  isRepost       Boolean   @default(false)
  originalPostId String?
  originalPost   Post?     @relation("RepostRelation", fields: [originalPostId], references: [id])
  reposts        Post[]    @relation("RepostRelation")

  videoPost      VideoPost?
  textPost       TextPost?
  quotePost      QuotePost?
  photoPost      PhotoPost?
  linkPost       LinkPost?

  tags           Tag[]      @relation("PostTags")
  comments       Comment[]
  likes          Like[]
}

model VideoPost {
  id        String  @id
  title     String  @db.VarChar(50)
  videoUrl  String

  post      Post    @relation(fields: [id], references: [id])
}

model TextPost {
  id          String  @id
  title       String  @db.VarChar(50)
  announcement String @db.VarChar(255)
  text        String  @db.VarChar(1024)

  post        Post    @relation(fields: [id], references: [id])
}

model QuotePost {
  id        String  @id
  quote     String  @db.VarChar(300)
  author    String  @db.VarChar(50)

  post      Post    @relation(fields: [id], references: [id])
}

model PhotoPost {
  id        String  @id
  photoUrl  String

  post      Post    @relation(fields: [id], references: [id])
}

model LinkPost {
  id        String  @id
  url       String
  description String? @db.VarChar(300)

  post      Post    @relation(fields: [id], references: [id])
}

model Tag {
  name   String  @id @db.VarChar(10) // в нижнем регистре
  posts  Post[]  @relation("PostTags")
}

model Comment {
  id        String   @id @default(uuid())
  text      String   @db.VarChar(300)
  createdAt DateTime @default(now())

  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String

  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, postId])
}
